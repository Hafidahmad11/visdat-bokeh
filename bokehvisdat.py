# -*- coding: utf-8 -*-
# """VisDead_Interactive_visualisasi_kel04_NOTE.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1h-UZ8iTKEWPoWMlLQCbHeiAGmdhSuzrd

# Kelompok 4


# *   Widi Sayyid Fadil Muhammad ( 130119 )
# *   Azrina Fazira A ( 130119 )
# *   Hafid Ahmad Adyatma ( 1301194235 )

# Topik
# 1. Visualisasi pergerakan nilai saham
# 2. Visualisasi statistik COVID-19
# 3. Visualisasi awan kata
# 4. Visualisasi jejaring transportasi
# 5. Visualisasi untuk kasus lainnya.

# Langkah - langkah membuat data menjadi visualisasi dengan Bokeh


# *   Siapkan Data
# *   Tentukan dimana Visualisasi akan dirender
# *   Mengatur Gambar
# *   Hubungkan dan Gambar data
# *   Atur Tata letak
# *   Pratinjau dan simpan kreasi data
# """

# Data handling
from bokeh.models import HoverTool, Select
from bokeh.models import CustomJS
from bokeh.layouts import layout
import pandas as pd
import numpy as np

# Bokeh libraries
from bokeh.io import output_file, output_notebook, curdoc
from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource
from bokeh.layouts import row, column, gridplot
from bokeh.models.widgets import Tabs, Panel

from bokeh.core.validation import silence
from bokeh.core.validation.warnings import EMPTY_LAYOUT, MISSING_RENDERERS
silence(EMPTY_LAYOUT, True)
silence(MISSING_RENDERERS, True)

# """## Note

# Note: Sometimes, when rendering multiple visualizations sequentially, youâ€™ll see that past renders are not being cleared with each execution. If you experience this, import and run the following between executions:
# """

# Import reset_output (only needed once)
# from bokeh.plotting import reset_output

# Use reset_output() between subsequent show() calls, as needed
# reset_output()

curdoc().theme = "caliber"

# Read Dataset


df_HangSeng = pd.read_csv("./Hang_Seng.csv")
#df_HangSeng.head()

df_NasDaq = pd.read_csv("./Nasdaq.csv")
#df_NasDaq.head()

df_Nikkei = pd.read_csv("./Nikkei.csv")
#df_Nikkei.head()

#df_HangSeng.shape

#df_NasDaq.shape

#df_Nikkei.shape

df_Nikkei['Date'] = pd.to_datetime(df_Nikkei['Date'])
df_NasDaq['Date'] = pd.to_datetime(df_NasDaq['Date'])
df_HangSeng['Date'] = pd.to_datetime(df_HangSeng['Date'])

p = figure(title='Hang Seng In Stock Market',
           x_axis_label='Month-Year', y_axis_label='Price',
           x_axis_type='datetime',
           sizing_mode="stretch_width", plot_height=350)

p.line(x=df_HangSeng['Date'], y=df_HangSeng['Adj Close'],
       line_width=2, line_color="cyan")

#show(p)

p = figure(title='NasDaq In Stock Market',
           x_axis_label='Month-Year', y_axis_label='Price',
           x_axis_type='datetime',
           sizing_mode="stretch_width", plot_height=350)

p.line(x=df_NasDaq['Date'], y=df_NasDaq['Adj Close'],
       line_width=2, line_color="orange")

# show(p)

p = figure(title='Nikkei In Stock Market',
           x_axis_label='Month-Year', y_axis_label='Price',
           x_axis_type='datetime',
           sizing_mode="stretch_width", plot_height=350)

p.line(x=df_Nikkei['Date'], y=df_Nikkei['Adj Close'],
       line_width=2, line_color="blue")

# show(p)

HangSeng_cds = ColumnDataSource(df_HangSeng)
NasDaq_cds = ColumnDataSource(df_NasDaq)
Nikkei_cds = ColumnDataSource(df_Nikkei)

# """## Visualize"""

# image

df_HangSeng['image'] = 'https://www.logolynx.com/images/logolynx/b5/b58776ed2b1aa648ad97051fbc53457.jpeg'
df_NasDaq['image'] = 'https://amcham.no/wp-content/uploads/2019/04/nasdaq-logo-white.png'
df_Nikkei['image'] = 'https://cdn.shopify.com/s/files/1/1548/2107/files/nikkei.png?v=1480953545'

df_HangSeng.head(1)

# """## Adding Interactions ( Select )"""


hover = HoverTool(tooltips="""
                  <div>
                    <div><strong>Adj Close:</strong>@{Adj Close}</div>
                    <br>
                    <div><img src="@image" alt="@Name" width="200" /><div>
                  </div>   
                  """)

TOOLTIPS = """
      <div>
        <div><strong>Adj Close:</strong>@{Adj Close}</div>
        <br>
        <div><img src="@image" alt="@Name" width="200" /><div>
      </div>
        
"""

TOOLTIPS2 = """
      <div>
        <div><strong>Volume:</strong>@{Adj Close}</div>
        <br>
        <div><img src="@image" alt="@Name" width="200" /><div>
      </div>

"""


fig = figure(title='STOCK MARKET',
             x_axis_label='Month-Year', y_axis_label='Price',
             x_axis_type='datetime',
             sizing_mode="stretch_width", plot_height=350)

points = fig.line(x='Date', y='Adj Close', source=HangSeng_cds,
                  legend_label="HangSeng", line_width=2, line_color="cyan")
points2 = fig.line(x='Date', y='Adj Close', source=NasDaq_cds,
                   legend_label="NasDaq", line_width=2, line_color="red")
points3 = fig.line(x='Date', y='Adj Close', source=Nikkei_cds,
                   legend_label="Nikkei", line_width=2, line_color="green")

select = Select(title="Choose Parameter", value=points.glyph.y,
                options=['Adj Close', 'Volume'])
select.js_on_change('value',
                    CustomJS(args=dict(other1=fig, hover=hover, TOOLTIPS=TOOLTIPS, TOOLTIPS2=TOOLTIPS2, fig=fig.tools, points=points, points2=points2, points3=points3, new_y={}),
                             code="""
                        new_y = {'field':this.value}
                        points.glyph.y = new_y
                        points2.glyph.y = new_y
                        points3.glyph.y = new_y

                        if(this.value == 'Adj Close'){
                          console.log('Change hover to :', this.value)
                          fig[6].tooltips = TOOLTIPS
                        }else if(this.value == 'Volume'){
                          console.log('Change hover to :', this.value)
                          fig[6].tooltips = TOOLTIPS2
                        }
                        console.log(new_y)

                    """
                             )
                    )



def set_style(p):
    # Tick labels
    p.xaxis.major_label_text_font_size = '6pt'
    p.yaxis.major_label_text_font_size = '10pt'


fig1 = figure(title='Nikkei In Stock Market',
              x_axis_label='Month-Year', y_axis_label='Price',
              x_axis_type='datetime',
              sizing_mode="stretch_width", plot_height=350, plot_width=750)
fig1.line(x=df_Nikkei['Date'], y=df_Nikkei['Adj Close'],
          line_width=2, line_color="blue")
tab1 = Panel(child=fig1, title="Nikkei")

fig2 = figure(title='NasDaq In Stock Market',
              x_axis_label='Month-Year', y_axis_label='Price',
              x_axis_type='datetime',
              sizing_mode="stretch_width", plot_height=350, plot_width=750)
fig2.line(x=df_NasDaq['Date'], y=df_NasDaq['Adj Close'],
          line_width=2, line_color="cyan")
tab2 = Panel(child=fig2, title="NasDaq")


tabs = Tabs(tabs=[tab1, tab2])

set_style(fig1)
set_style(fig2)




fig.add_tools(hover)

fig.title.text_font_size = "25px"
fig.title.align = "right"
fig.title.text_color = "white"

fig.legend.label_text_font = "times"
fig.legend.label_text_font_style = "italic"

fig.legend.background_fill_color = "black"
fig.legend.background_fill_alpha = 0.8

fig.legend.click_policy = "hide"

layout = layout([
    [select],
    [fig],
    [tabs],
])
curdoc().add_root(layout)
curdoc().title = "Stock Market Dashboard"
